setwd('/Users/alexandradecker/Dropbox/Research/outside project/sustainedAttention/')
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
library(roll); library(broom); library(lme4); library(lmerTest); library(data.table);library(plyr); library(reshape)
load("sustAtt_June12.R")
mem1 <- glmer(memoryHits3 ~ rtMoving_preRoll3_scaled + (rtMoving_preRoll3_scaled |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'living' & group == 'kid'])
summary(mem1)
mem1 <- glmer(memoryHits3 ~ rtMoving_preRoll3_scaled + (rtMoving_preRoll3_scaled |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'nonliving' & group == 'kid'])
summary(mem1)
mem2 <- glmer(memoryHits3 ~ smoothed_absdev_gaussian_pre + (smoothed_absdev_gaussian_pre |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'living' & group == 'kid'])
summary(mem2)
mem8 <- glmer(memoryHits3 ~ smoothed_absdev_exp_surround + (smoothed_absdev_exp_surround |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'living' & group == 'kid'])
summary(mem8)
mem3 <- glmer(memoryHits3 ~ smoothed_absdev_gaussian_surround + (smoothed_absdev_gaussian_surround |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'living' & group == 'kid'])
summary(mem3)
mem3 <- glmer(memoryHits3 ~ smoothed_absdev_gaussian_surround + (smoothed_absdev_gaussian_surround |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'nonliving' & group == 'kid'])
mem3 <- glmer(memoryHits3 ~ smoothed_absdev_gaussian_surround + (smoothed_absdev_gaussian_surround |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'nonliving' & group == 'kid'])
AIC(mem3)
AIC(mem3)
summary(mem3)
mem3 <- glmer(accEnc ~ smoothed_absdev_gaussian_surround + (smoothed_absdev_gaussian_surround |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'nonliving' & group == 'kid'])
mem3 <- glmer(accEncoding ~ smoothed_absdev_gaussian_surround + (smoothed_absdev_gaussian_surround |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'nonliving' & group == 'kid'])
summary(mem3)
grep(names(recognitionOldb), pattern = "solute", value = TRUE)
mem3b <- glmer(accEncoding ~ rtMeanAbsoluteDeviation_preRoll3_scaled + (rtMeanAbsoluteDeviation_preRoll3_scaled |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'nonliving' & group == 'kid'])
mem3b <- glmer(accEncoding ~ rtMeanAbsoluteDeviation_preRoll3_scaled + (rtMeanAbsoluteDeviation_preRoll3_scaled |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'nonliving' & group == 'kid'])
summary(mem3b)
mem3b <- glmer(accEncoding ~ rtMeanAbsoluteDeviation_preRoll3_scaled + (rtMeanAbsoluteDeviation_preRoll3_scaled |participant), family = "binomial", data = recognitionOldb[classifyEnc == 'living' & group == 'kid'])
summary(mem3b)
summary(glmer(memoryHits3 ~ accEncoding + (accEncoding|participant)), data = recognitionOldb)
summary(glmer(memoryHits3 ~ accEncoding + (accEncoding|participant), data = recognitionOldb))
summary(glmer(memoryHits3 ~ accEncoding + (accEncoding|participant), family = "binomial", data = recognitionOldb))
summary(glmer(memoryHits3 ~ accEncoding + (accEncoding|participant), family = "binomial", data = recognitionOldb[group == "kid"]))
summary(glmer(memoryHits3 ~ accEncoding + (accEncoding|participant), family = "binomial", data = recognitionOldb[group == "adult"]))
summary(glmer(memoryHits3 ~ accEncoding + (accEncoding|participant), family = "binomial", data = recognitionOldb[group == "adult" & classifyEnc == "nonliving"]))
summary(glmer(memoryHits3 ~ accEncoding + (accEncoding|participant), family = "binomial", data = recognitionOldb[group == "adult" & classifyEnc == "living"]))
summary(glmer(memoryHits3 ~ accEncoding + (accEncoding|participant), family = "binomial", data = recognitionOldb[group == "kid" & classifyEnc == "living"]))
summary(glmer(memoryHits3 ~ accEncoding + (accEncoding|participant), family = "binomial", data = recognitionOldb[group == "kid" & classifyEnc == "nonliving"]))
summary(glmer(memoryHits3 ~ classifyEnc + (classifyEnc|participant), family = "binomial", data = recognitionOldb[group == "kid"]))
recognitionOldb[group == "kid", unique(participant)]
summary(glmer(memoryHits3 ~ classifyEnc + (classifyEnc|participant), family = "binomial", data = recognitionOldb[group == "kid" & accEncoding == 1]))
summary(glmer(memoryHits3 ~ classifyEnc + (classifyEnc|participant), family = "binomial", data = recognitionOldb[group == "adult" & accEncoding == 1]))
#### 1 open data ####
rm(list = ls())
library(dplyr); library(data.table); library(dtplyr); library(lme4); library(tidyverse); library(semPlot)
library(OpenMx)
install.packages(c("semPlot", "OpenMx"))
library(semPlot)
library(semPlot)
library(semPlot)
install.packages(c("semPlot", "OpenMx"))
library(semPlot)
install.packages("semPlot", dependencies = T )
library(semPlot)
install.packages("OpenMx", dep = T)
install.packages("OpenMx", dep = T)
library(semPlot)
install.packages("semPlot", dependencies = T )
library(semPlot)
library(data.table)
library(hausekeep)
install.packages("emmeans")
install.packages(MEMSS)
install.packages("MEMSS")
install.packages("psych")
install.packages("tidyverse")
install.packages("broom")
install.packages("xaringan")
install.packages(sjPlot)
install.packages("sjPlot")
install.packages("GGally")
install.packages("ggbeeswarm")
install.packages("ggpol")
update.packages(ask = FALSE, checkBuilt = TRUE)
options(htmltools.dir.version = FALSE)
par(mar = c(4, 4, 1, .1))
install.packages(c("data.table", "feather"))
library(xaringan)
install.packages(c("DT", "leaflet"))
options(htmltools.dir.version = FALSE)
devtools::install_github("yihui/xaringan")
install.packages("devtools")
library(devtools)
devtools::install_github("yihui/xaringan")
# a boring regression
fit = lm(dist ~ 1 + speed, data = cars)
coef(summary(fit))
dojutsu = c('地爆天星', '天照', '加具土命', '神威', '須佐能乎', '無限月読')
grep('天', dojutsu, value = TRUE)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 19, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
knitr::kable(head(iris), format = 'html')
library(leaflet)
leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)
DT::datatable(
head(iris, 10),
fillContainer = FALSE, options = list(pageLength = 8)
)
DT::datatable(
head(iris, 10),
fillContainer = FALSE, options = list(pageLength = 8)
)
````
`r ''````{r tidy=FALSE}
if (TRUE) {
*{{ message("Very important!") }}
}
```
````
Output:
```{r tidy=FALSE}
if (TRUE) {
{{ message("Very important!") }}
}
```
````
`r ''````{r tidy=FALSE}
if (TRUE) {
*{{ message("Very important!") }}
}
```
````
Output:
```{r tidy=FALSE}
if (TRUE) {
{{ message("Very important!") }}
}
```
`r ''````{r tidy=FALSE}
library(ggplot2)
ggplot(mtcars) +
aes(mpg, disp) +
geom_point() +   #<<
geom_smooth()    #<<
```r
if (TRUE) {
* message("Very important!")
}
if (TRUE) {
* message("Very important!")
}
```r
if (TRUE) {
** message("Very important!")
}
if (TRUE) {
** message("Very important!")
}
if (TRUE) {
** message("Very important!")
}
library(ggplot2)
ggplot(mtcars) +
aes(mpg, disp) +
geom_point() +   #<<
geom_smooth()    #<<
library(ggplot2)
ggplot(mtcars) +
aes(mpg, disp) +
geom_point() +   #<<
geom_smooth()    #<<
head(iris)
```{r}
names(xaringan:::list_css())
```
```{r}
names(xaringan:::list_css())
```
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 19, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
```{r cars, fig.height=4, dev='svg'}
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 19, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
```
---
library(afex)
install.packages("afex")
library(afex)
library(emmeans)
library(MEMSS)
library(psych)
library(tidyverse)
library(broom)
library(xaringan)
library(sjPlot)
library(GGally)
library(ggbeeswarm)
library(ggpol)
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 19, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
install.packages("cairo")
install.packages("Cairo")
library("Cairo")
library("Cairo")
### mapping of supported type names to canonical type names
### as of 1.3-2 png/png24/png32 are the same (we don't support png8 anyway)
.supported.types <- c(png="png",png24="png",png32="png",jpeg="jpeg",jpg="jpeg",tiff="tiff",tif="tiff",
pdf="pdf",svg="svg",ps="ps",postscript="ps",x11="x11",xlib="x11",
win="win",win32="win",window="win",windows="win",w32="win",raster="raster")
.image <- function(device) {
a <- .Call("get_img_backplane", device, PACKAGE="Cairo")
names(a) <- c('ref', 'info')
a$width <- a[[2]][1]
a$height <- a[[2]][2]
a$format <- c("ARGB","RGB","A8","A1","dep","RGB16")[a[[2]][3]+1]
class(a) <- "CairoImageRef"
a
}
.onLoad <- function(libname, pkgname) {
## add our libs to the PATH
if (.Platform$OS.type=="windows") {
lp<-gsub("/","\\\\",paste(libname,pkgname,"libs",sep="/"))
cp<-strsplit(Sys.getenv("PATH"),";")
if (! lp %in% cp) Sys.setenv(PATH=paste(lp,Sys.getenv("PATH"),sep=";"))
}
library.dynam("Cairo", pkgname, libname)
.Call("Rcairo_initialize", PACKAGE="Cairo")
}
sudo apt-get install libcairo2-dev
library(Cairo)
library(tinytex)
capabilities()
reticulate::repl_python()
setwd("/Users/alexandradecker/Dropbox/Projects/reactivate/trialorder/")
list.files()
library(readxl)
list.files()
df_incidental <- fread("1_intentional_encoding_test.csv")
library(data.table)
df_incidental <- fread("1_intentional_encoding_test.csv")
df_incidental
df_test <- fread("1_intentional_encoding_test.csv")
list.files()
df_incidental <- fread("1_intentional_encoding.csv")
df_incidental
df_test
names(df_test)
names(df_test); names(df_incidental)
names(df_test);
names(df_incidental)
left_join(df_test, df_incidental[, .(ImageA, ImageC)])
library(data.table); library(dtplyr); library(tidyverse)
left_join(df_test, df_incidental[, .(ImageA, ImageC)])
left_join(df_test, df_incidental[, .(ImageA, ImageC)])
df_incidental
df_test
df_test <- left_join(df_test, df_incidental[, .(ImageA, ImageC)])
df_test
write.csv("1_intentioanl_encoding_test.csv")
write.csv(file = "1_intentioanl_encoding_test.csv", x = df_test )
library(data.table); library(dtplyr); library(tidyverse)
list.files()
df_test <- fread("2_intentional_encoding_test.csv")
df_incidental <- fread("2_intentional_encoding.csv")
names(df_test); names(df_incidental)
df_test <- left_join(df_test, df_incidental[, .(ImageA, ImageC)])
write.csv(file = "1_intentioanl_encoding_test.csv", x = df_test )
library(data.table); library(dtplyr); library(tidyverse)
list.files()
df_test <- fread("3_intentional_encoding_test.csv")
df_incidental <- fread("3_intentional_encoding.csv")
names(df_test); names(df_incidental)
df_test <- left_join(df_test, df_incidental[, .(ImageA, ImageC)])
write.csv(file = "1_intentioanl_encoding_test.csv", x = df_test )
write.csv(file = "3_intentioanl_encoding_test.csv", x = df_test )
```{r}
library(data.table); library(dtplyr); library(tidyverse)
list.files()
df_test <- fread("1_intentional_encoding_test.csv")
df_incidental <- fread("1_intentional_encoding.csv")
names(df_test); names(df_incidental)
df_test <- left_join(df_test, df_incidental[, .(ImageA, ImageC)])
write.csv(file = "1_intentioanl_encoding_test.csv", x = df_test )
library(data.table); library(dtplyr); library(tidyverse)
list.files()
df_test <- fread("4_intentional_encoding_test.csv")
df_incidental <- fread("4_intentional_encoding.csv")
names(df_test); names(df_incidental)
df_test <- left_join(df_test, df_incidental[, .(ImageA, ImageC)])
write.csv(file = "4_intentioanl_encoding_test.csv", x = df_test )
df_test
library(data.table); library(dtplyr); library(tidyverse)
list.files()
df_test <- fread("3_intentional_encoding_test.csv")
df_incidental <- fread("3_intentional_encoding.csv")
names(df_test); names(df_incidental)
df_test <- left_join(df_test, df_incidental[, .(ImageA, ImageC)])
write.csv(file = "3_intentional_encoding_test.csv", x = df_test )
```{r}
library(data.table); library(dtplyr); library(tidyverse)
list.files()
df_test <- fread("2_intentional_encoding_test.csv")
df_incidental <- fread("2_intentional_encoding.csv")
names(df_test); names(df_incidental)
df_test <- left_join(df_test, df_incidental[, .(ImageA, ImageC)])
write.csv(file = "2_intentional_encoding_test.csv", x = df_test )
